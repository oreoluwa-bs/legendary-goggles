---
import Layout from "src/layouts/Layout.astro";

const images = [
  "https://plus.unsplash.com/premium_photo-1680040211019-29a8dbb250d5?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=2160&q=80",
  "https://plus.unsplash.com/premium_photo-1682500051076-9b4119f644b1?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1469&q=80",
  "https://images.unsplash.com/photo-1682681857663-7a5cf876ad1a?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1932&q=80",
  "https://plus.unsplash.com/premium_photo-1682401101581-b6be0396b706?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=687&q=80",
  "https://plus.unsplash.com/premium_photo-1676660359929-db7212759d24?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=687&q=80",
  "https://plus.unsplash.com/premium_photo-1681223965264-6d81ae3bb399?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=687&q=80",
  // "https://images.unsplash.com/photo-1682625247239-f0761c5ddb2e?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=687&q=80",
  // "https://plus.unsplash.com/premium_photo-1681223964644-d76b97e65ca9?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1471&q=80",
  // "https://images.unsplash.com/photo-1682589183381-9c1ca231d242?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=687&q=80",
  // "https://images.unsplash.com/photo-1682608452409-2ff646571d34?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=669&q=80",
  //   "https://images.unsplash.com/photo-1682100615199-5a90830ccbb3?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1828&q=80",
  //   "https://images.unsplash.com/photo-1682621077269-cac5773fbd3e?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=688&q=80",
];
---

<style lang="scss" scoped>
  // .grid {
  //   display: grid;
  //   grid-template-columns: repeat(3, 1fr);
  //   gap: 5vh;

  //   &[data-direction="horizontal"] {
  //     grid-template-columns: auto;
  //     grid-auto-columns: 23.5vw;
  //     grid-auto-flow: column;
  //   }

  //   &-item {
  //     height: 47.5vh; /* 50vh minus half of the gap */ // (50vh - (5vh/2))
  //     background-size: cover;
  //     background-position: 50% 20%;

  //     &:nth-child(3n-2) {
  //       // every first
  //       border-radius: 0 2rem 2rem 0;
  //     }

  //     &:nth-child(3n) {
  //       // every 3rd
  //       border-radius: 2rem 0 0 2rem;
  //     }

  //     &:nth-child(3n-1) {
  //       // every middle
  //       border-radius: 2rem;
  //     }
  //   }
  // }
  .grid {
    background-color: black;
    color: white;
    display: flex;
    flex-direction: column;
    gap: 5vh;

    &-item {
      height: 100vh;
      place-items: center;
      display: grid;

      &--stack {
        display: grid;
        gap: 2rem;
        grid-template-rows: 1fr auto;
      }

      &-inner {
        display: grid;
        gap: 1rem;
        place-items: center;
        text-align: center;
      }
      &-logo {
        padding: 8rem 1rem 0;
      }

      &-img {
        background-size: cover;
        background-position: 50% 50%;
        height: 70vh;
        aspect-ratio: 1.5;
      }
      &-text {
        margin: 0;
      }
    }
  }
</style>

<Layout title="Infinite Scroll Loop">
  <main>
    <div class="grid">
      <!-- {
        images.map((image) => {
          return (
            <div class="grid-item" style={`background-image: url(${image});`} />
          );
        })
      } -->
      <div class="grid-item grid-item--stack">
        <svg
          class="grid-item-logo"
          width="100%"
          height="100%"
          viewBox="0 0 503 277"
          preserveAspectRatio="none"
        >
          <path
            d="M56.3 232.3 56.3 193.8C56.3 177.4 54.7 174.1 48.5 165.9 35.4 148.8 17.6 133 8.5 120.8.7 110.3.1 103.7.1 85.6L.1 45.2C.1 14.9 13.5.5 41 .5 68.8.5 79.1 15.3 79.1 45.2L79.1 94.5 56.9 94.5 56.9 48.5C56.9 35 53.5 25.8 40.7 25.8 29.8 25.8 24.1 32.4 24.1 45.2L24.1 85.3C24.1 96.8 25.1 100.1 29.8 106.3 41 121.8 59.1 137.6 68.8 150.4 77.2 161.6 80 169.8 80 193.5L80 232.3C80 260.9 68.8 277 40.4 277 12.3 277 .1 261.5.1 232.3L.1 174.7 22.9 174.7 22.9 228.7C22.9 243.1 26.9 252.3 40.1 252.3 51.6 252.3 56.3 245.1 56.3 232.3ZM176.5 277 101.5 277 101.5.5 127.1.5 127.1 251.8 176.5 251.8 176.5 277ZM290 277 264.5 277 258.4 230.6 217.1 230.6 211 277 186.2 277 224.1.5 254.1.5 290 277ZM218.1 207.1 253.4 207.1C247.7 159.7 241.6 114 236.3 65.3 230.5 114 224.5 159.7 218.1 207.1ZM399.6 277 374 277 326.3 75.1C326.6 117.1 326.6 155.7 326.6 197.7L326.6 277 304.5 277 304.5.5 335 .5 377.4 203.1C377 165.1 377 129.2 377 91.2L377 .5 399.6.5 399.6 277ZM471.5 277 446.3 277 446.3 26.3 415.3 26.3 415.3.5 502.4.5 502.4 26.3 471.5 26.3 471.5 277Z"
            id="SLANT"
            fill="#fff"></path>
        </svg>
        <p class="grid-item-text credits">
          An infinite scrolling demo based on <a
            href="https://www.bureaudam.com/">Bureau DAM</a
          >
        </p>
      </div>
      <div class="grid-item">
        <div class="grid-item-inner">
          <div
            class="grid-item-img"
            style={`background-image:url(${images[1]});`}
          >
          </div>
          <p class="grid-item-text"><a href="#">View all projects â†’</a></p>
        </div>
      </div>
    </div>
  </main>
</Layout>

<script>
  import Lenis from "@studio-freight/lenis";
  import { gsap } from "gsap";
  import { ScrollTrigger } from "gsap/all";

  const lenis = new Lenis({
    smooth: true,
    infinite: true,
    // direction: "horizontal",
  });

  function raf(time: any) {
    lenis.raf(time);
    requestAnimationFrame(raf);
  }

  requestAnimationFrame(raf);

  const repeatItems = (parentEl: Element, total = 0) => {
    const items = [...parentEl.children];
    for (let i = 0; i <= total - 1; ++i) {
      var cln = items[i].cloneNode(true);
      parentEl.appendChild(cln);
    }
  };
  repeatItems(document.querySelector(".grid")!, 1);

  gsap.registerPlugin(ScrollTrigger);

  lenis.on("scroll", () => {
    ScrollTrigger.update();
  });

  // document.querySelectorAll(".grid-item").forEach((el) => {
  //   // gsap.set(el, { transformOrigin: `0% 100%` });
  //   gsap.set(el, { backgroundSize: "cover" });
  //   gsap.to(el, {
  //     ease: "none",
  //     startAt: {
  //       // skewY: 0, scale: 1
  //       rotate: 0,
  //     },
  //     rotate: 270,
  //     // skewY: 50,
  //     // scale: 0,
  //     scrollTrigger: {
  //       trigger: el,
  //       start: "bottom bottom",
  //       end: "bottom top",
  //       scrub: true,
  //       // fastScrollEnd: true,
  //       markers: true,
  //       onLeave: () => {
  //         gsap.set(el, {
  //           // scale: 1, skewY: 0
  //           rotate: 0,
  //         });
  //       },
  //     },
  //   });
  // });

  const items = [...document.querySelectorAll(".grid-item")];

  const firtsItem = items[0];
  gsap.set(firtsItem, { transformOrigin: "50% 100%" });
  gsap.to(firtsItem, {
    ease: "none",
    startAt: { scaleY: 1 },
    scaleY: 0,
    scrollTrigger: {
      trigger: firtsItem,
      start: "center center",
      end: "bottom top",
      scrub: true,
      fastScrollEnd: true,
      onLeave: () => {
        gsap.set(firtsItem, { scaleY: 1 });
      },
    },
  });

  // last item
  const lastItem = items[2];
  gsap.set(lastItem, { transformOrigin: "50% 0%", scaleY: 0 });
  gsap.to(lastItem, {
    ease: "none",
    startAt: { scaleY: 0 },
    scaleY: 1,
    scrollTrigger: {
      trigger: lastItem,
      start: "top bottom",
      end: "bottom top",
      scrub: true,
      fastScrollEnd: true,
      onLeaveBack: () => {
        gsap.set(lastItem, { scaleY: 1 });
      },
    },
  });

  // in between
  let ft: gsap.core.Timeline;
  let st: gsap.core.Timeline;
  const middleItem = items[1];

  ft = gsap.timeline().to(middleItem, {
    ease: "none",
    onStart: () => {
      if (st) st.kill();
    },
    startAt: { scale: 0 },
    scale: 1,
    scrollTrigger: {
      trigger: middleItem,
      start: "top bottom",
      end: "center center",
      scrub: true,
      onEnter: () => gsap.set(middleItem, { transformOrigin: "50% 0%" }),
      onEnterBack: () => gsap.set(middleItem, { transformOrigin: "50% 0%" }),
      onLeave: () => gsap.set(middleItem, { transformOrigin: "50% 100%" }),
      onLeaveBack: () => gsap.set(middleItem, { transformOrigin: "50% 100%" }),
    },
  });

  st = gsap.timeline().to(middleItem, {
    ease: "none",
    onStart: () => {
      if (ft) ft.kill();
    },
    startAt: { scale: 1 },
    scale: 0,
    scrollTrigger: {
      trigger: middleItem,
      start: "center center",
      end: "bottom top",
      scrub: true,
      onEnter: () => gsap.set(middleItem, { transformOrigin: "50% 100%" }),
      onEnterBack: () => gsap.set(middleItem, { transformOrigin: "50% 100%" }),
      onLeave: () => gsap.set(middleItem, { transformOrigin: "50% 0%" }),
      onLeaveBack: () => gsap.set(middleItem, { transformOrigin: "50% 0%" }),
    },
  });

  const refresh = () => {
    ScrollTrigger.clearScrollMemory();
    window.history.scrollRestoration = "manual";
    ScrollTrigger.refresh(true);
  };

  refresh();
  window.addEventListener("resize", refresh);
</script>
