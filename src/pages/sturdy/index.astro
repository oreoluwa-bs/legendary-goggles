---
import Layout from "~/layouts/Layout.astro";

const artists = [
  "Drake",
  "Bad Bunny",
  "Kendric Lamar",
  "Baby Keem",
  "Giveon",
  "Travis Scott",
  "Bacardi",
  "Rauw Alejandro",
  "Honda",
  "Rosalia",
  "Alexander Wang",
];
---

<style lang="scss">
  .sturdy {
    position: relative;
  }
  .sturdy-indicator {
    position: sticky;
    top: 50vh;
    width: 100%;
    transform: translateY(-50%);
    height: 30px;

    &::after,
    &::before {
      content: "";
      height: 100%;
      width: 50px;
      background-color: black;
      position: absolute;
    }

    &::before {
      left: 0;
    }
    &::after {
      right: 0;
    }
  }

  .sturdy-wrapper {
    position: sticky;
    top: 0;
    // padding: 50vh 0;
    // height: 100vh;
    // width: 100vw;
    perspective: 100rem;
    // overflow: hidden;
  }

  .sturdy-items {
    padding: 0;
    margin: 0;
    list-style: none;
    text-align: center;
    transform-origin: 50% 50%;
    transform: rotateX(55.6516deg);

    .sturdy-item {
      font-size: 7rem;
      opacity: 0.3;
      text-transform: uppercase;
      // transform-style: preserve-3d;
      transition: all 0.3s;
      // backface-visibility: hidden;
      // transform-origin: 50% 50%;

      &--active {
        opacity: 1;
      }
    }
  }
</style>

<Layout title="Sturdy">
  <main>
    <section class="sturdy">
      <div class="sturdy-indicator"></div>
      <div class="sturdy-wrapper">
        <ul class="sturdy-items">
          {
            artists.map((artist) => {
              return <li class="sturdy-item">{artist}</li>;
            })
          }
        </ul>
      </div>
    </section>
  </main>
</Layout>

<script>
  const red = document.querySelectorAll<HTMLElement>(".sturdy-item");

  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          entry.target.classList.add("sturdy-item--active");
        } else {
          entry.target.classList.remove("sturdy-item--active");
        }
      });
    },
    { rootMargin: "-50% 0px -50% 0px" }
  );

  red.forEach((el, index) => {
    observer.observe(el);

    // el.style.transform = `rotateX(-${index * 24}deg)`;
  });
</script>
